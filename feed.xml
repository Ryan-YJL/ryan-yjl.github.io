<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>Ryan Yang</title>
<description>Everything about Ryan Yang J.L.</description>	
<link></link>
<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />

<item>
<title>Using subversion (GUI) SVNx to publish your WordPress plugin</title>
<description>&lt;p&gt;You have just got approved by WordPress and handed your official WordPress repository and want to get up and running with publishing your WordPress plugin at the plugin directory.&lt;/p&gt;

&lt;p&gt;But you have been using git have no time to learn all the nooks and crannies of SVN, what should you do?&lt;/p&gt;

&lt;p&gt;If you are using a mac, I would recommend you to use SVNx. It is free and easy to use and you can download it &lt;a href=&quot;https://code.google.com/p/svnx/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you downloaded, simply open up the app and go to the top menu bar and right under &amp;#39;Window&amp;#39;, you will see &amp;#39;&lt;strong&gt;Repositories&lt;/strong&gt;&amp;#39; and &amp;#39;&lt;strong&gt;Working Copies&lt;/strong&gt;&amp;#39;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/uploads/svnx-screenshot-1.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;Basically, &amp;#39;&lt;strong&gt;Repositories&lt;/strong&gt;&amp;#39; is the one where you specify your WordPress plugin repository.&lt;/p&gt;

&lt;p&gt;So you can go ahead and hit the &amp;quot;+&amp;quot; sign to create a respository.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enter a &lt;strong&gt;Name&lt;/strong&gt; for your repository (can be anything)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Path&lt;/strong&gt; which will be something like http://plugins.svn.wordpress.org/your-plugin-name/&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User&lt;/strong&gt; and &lt;strong&gt;Pass&lt;/strong&gt; which will be your wordpress.org credentials&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/uploads/svnx-screenshot-2.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;If your svn plugin url and credentials are right, at the GUI you will see that under &amp;#39;root&amp;#39;, there are 4 folders.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;assets&lt;/li&gt;
&lt;li&gt;branches&lt;/li&gt;
&lt;li&gt;tags&lt;/li&gt;
&lt;li&gt;trunk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go ahead and svn checkout the files to a local directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/uploads/svnx-screenshot-3.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;Next go to Window -&amp;gt; Working Copies and hit the &amp;quot;+&amp;quot; sign to create a &amp;quot;Working Copy&amp;quot;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/uploads/svnx-screenshot-4.jpg&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enter a &lt;strong&gt;Name&lt;/strong&gt; for your working copy. (can be anything)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Path&lt;/strong&gt; which will be the location where you checked out your respository in the previous step.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User&lt;/strong&gt; and &lt;strong&gt;Pass&lt;/strong&gt; which will be your wordpress.org credentials.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2) Copy all your plugin files to the trunk folder. ( This is where your development files should be. )&lt;/p&gt;

&lt;p&gt;Now when you double click on your &lt;strong&gt;Working Copy&lt;/strong&gt;, you will see the files that have been added to your directory. If a new file is added, you will see an &amp;#39;A&amp;#39; in front of the file path. If file has been changed, you will see an &amp;#39;M&amp;#39; instead.&lt;/p&gt;

&lt;p&gt;To upload your files to your repository is simple. Just select all the files you want and click &amp;#39;Add&amp;#39; or &amp;#39;Update&amp;#39; and then &amp;#39;Commit&amp;#39; to commit your changes to the wordpress repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/uploads/svnx-screenshot-5.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;Once you have committed the changes, you will see a Rev # and date/time along with your commit message over at the Respositories window.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/uploads/svnx-screenshot-6.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;Now to tag your release, all you need to do is to svn copy the newly updated &amp;#39;trunk&amp;#39; folder to the &amp;#39;tags&amp;#39; folder and indicate a &amp;#39;version&amp;#39;. Make sure that this version corresponds to the version info specified in your plugin main php file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/uploads/svnx-screenshot-7.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;Here is a simplified workflow of a WordPress plugin update using SVNx&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Do all your changes in the &amp;#39;trunk&amp;#39; folder &lt;/li&gt;
&lt;li&gt;Update the &amp;#39;Stable tag&amp;#39; in the readme file.&lt;/li&gt;
&lt;li&gt;Update the &amp;#39;Version&amp;#39; in your plugin’s main PHP file.&lt;/li&gt;
&lt;li&gt;Commit the additions/updates in the &amp;#39;trunk&amp;#39; folder at &amp;#39;Working Copies&amp;#39; window&lt;/li&gt;
&lt;li&gt;Go over to &amp;#39;Repositories&amp;#39; window&lt;/li&gt;
&lt;li&gt;Tag the new version by copying the &amp;#39;trunk&amp;#39; folder to a new tag under the &amp;#39;tags&amp;#39; folder.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Things to note&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Make sure you are selecting the trunk folder before you click on &amp;#39;svn copy&amp;#39; and that you have selected the &amp;#39;tags&amp;#39; folder for the target.&lt;/li&gt;
&lt;li&gt;Always remember to update your &amp;#39;Stable tag&amp;#39; in the readme.txt file&lt;/li&gt;
&lt;li&gt;You need to include &amp;#39;Version&amp;#39; info the plugin main php, your plugin page will not show the correct download version.&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Thu, 03 Apr 2014 00:00:00 +0800</pubDate>
<link>/web/2014/04/03/using-subversion-gui-synx-to-publish-your-wordpress-plugin.html</link>
<guid isPermaLink="true">/web/2014/04/03/using-subversion-gui-synx-to-publish-your-wordpress-plugin.html</guid>
</item>

<item>
<title>Using subversion (Command Line) to publish your WordPress plugin</title>
<description>&lt;p&gt;I recently had to write a WordPress plugin for my web application. Here is, step-by-step guide to publish your WordPress plugin.&lt;/p&gt;

&lt;h3&gt;What you need.&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;A WordPress.org account&lt;/li&gt;
&lt;li&gt;Learn how to use Subversion (SVN)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Prerequistie&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Your own WordPress plugin&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Using SVN&lt;/h2&gt;

&lt;p&gt;There are a number of ways to publish your WordPress. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can either use svn via the command line (or) &lt;/li&gt;
&lt;li&gt;if you are new to svn and want to &lt;a href=&quot;&quot;&gt;get going with a GUI&lt;/a&gt;. I recommend you to use &lt;a href=&quot;https://code.google.com/p/svnx/&quot;&gt;SVNx&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are more familar with the command line, you can simply open up Terminal on your mac. &lt;/p&gt;

&lt;p&gt;If you don&amp;#39;t know if you have svn installed, check by using &amp;#39;which&amp;#39; command.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;which svn
/usr/bin/svn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;1) Checkout the repository files from WordPress to your local directory&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;svn co http://plugins.svn.wordpress.org/your-plugin-name my-local-dir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will notice that your my-local-dir now has 4 folders&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;assets&lt;/li&gt;
&lt;li&gt;branches&lt;/li&gt;
&lt;li&gt;tags&lt;/li&gt;
&lt;li&gt;trunk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2) Copy all your plugin files to the trunk folder. ( This is where your development files should be. )&lt;/p&gt;

&lt;p&gt;3) Add files to your repository trunk&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;svn add trunk/*
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;svn ci -m &lt;span class=&quot;s1&quot;&gt;&amp;#39;First commit&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;4) Tag your release version&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;svn cp trunk tags/1.0
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;svn ci -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Tagging version 1.0&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is a simplified workflow of a WordPress plugin update&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Do all your changes in the &amp;quot;trunk&amp;quot; folder &lt;/li&gt;
&lt;li&gt;Update the &amp;quot;Stable tag&amp;quot; in the readme file.&lt;/li&gt;
&lt;li&gt;Update the &amp;quot;Version&amp;quot; in your plugin’s main PHP file.&lt;/li&gt;
&lt;li&gt;Commit the changes in the &amp;quot;trunk&amp;quot; folder&lt;/li&gt;
&lt;li&gt;Tag the new version by copying the &amp;quot;trunk&amp;quot; folder to a new tag under the &amp;quot;tags&amp;quot; folder.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Things to note&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Always remember to update your &amp;quot;Stable tag&amp;quot; in the readme.txt file&lt;/li&gt;
&lt;li&gt;You need to include &amp;quot;Version&amp;quot; info the plugin main php, your plugin page will not show the Download Version 1.0 correctly.&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Thu, 03 Apr 2014 00:00:00 +0800</pubDate>
<link>/web/2014/04/03/using-subversion-ci-to-publish-your-wordpress-plugin.html</link>
<guid isPermaLink="true">/web/2014/04/03/using-subversion-ci-to-publish-your-wordpress-plugin.html</guid>
</item>

<item>
<title>Using eval with redis-cli and lua</title>
<description>&lt;p&gt;Recently, I had to use redis for some bash scripting and came across lua as the --eval option on redis command line.&lt;/p&gt;

&lt;p&gt;Lua come across as a very simple scripting language and extremely lightweight and designed for easy integration into existing applications. &lt;/p&gt;

&lt;p&gt;Because it has so few functions out of the box, you can learn it within a couple of hours and if you are only using it for the purpose of passing some key value stores to redis via the command line, all you need to do is to master some of the basic conditionals of lua.&lt;/p&gt;

&lt;p&gt;This allows you to create all the redis commands you need to perform in a lua script and have the redis-cli evaluate the file for you.&lt;/p&gt;

&lt;p&gt;So you can have a simple lua script like:&lt;/p&gt;

&lt;p&gt;&lt;u&gt;script.lua&lt;/u&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KEYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;setnx&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;counter&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;HSET&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;member&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;some_field&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;some_value&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and then run your command like so &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;redis-cli -eval /path/to/script.lua
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In a more real world situation, you are mostly like to use a command before piping to redis-cli like this.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;cat file &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; redis-cli -eval /path/to/script.lua &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With a simple lua script, you can avoid using an additional layer of abstraction to interact with redis - a fast key value storage system.&lt;/p&gt;
</description>
<pubDate>Thu, 27 Feb 2014 00:00:00 +0800</pubDate>
<link>/web/2014/02/27/using-eval-with-redis-cli-and-lua.html</link>
<guid isPermaLink="true">/web/2014/02/27/using-eval-with-redis-cli-and-lua.html</guid>
</item>

<item>
<title>Optimizing Case sensitive unique key query without using utf8_bin-collation</title>
<description>&lt;p&gt;Most users of mysql would likely to have the collation of their database set to &lt;span class=&quot;impt&quot;&gt;utf8_general_ci&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Say you have a need to have a table of items with &amp;#39;name&amp;#39; as a unique key and want a name like &amp;quot;Guns N&amp;#39; Roses&amp;quot; to be different from &amp;quot;Guns n&amp;#39; Roses&amp;quot;&lt;/p&gt;

&lt;p&gt;Right away you would do something like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bands&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COLUMN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COLLATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utf8_bin&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bands&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;UNIQUE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, you can do a one way hash for &amp;#39;name&amp;#39; field with md5 and store it as &amp;#39;name_hash&amp;#39;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;**Note you still need to set it as a unique key but because md5 strings are all in 32 digit hexadecimal number, you don&amp;#39;t have to collate your hash column differently from the rest of your table.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is similar to how &lt;span class=&quot;impt&quot;&gt;utf8_bin compares characters in binary format&lt;/span&gt;. This means that characters like &amp;quot;å&amp;quot; will not be treated like &amp;quot;a&amp;quot;.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;In doing so, you can simply do a search&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Romeo &amp;amp; Juliet&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$name_hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;SELECT * FROM bands WHERE name_hash = &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, you may think, why use a hash when you can let mysql do all the heavy lifting? The benefit comes when there are times you have &lt;strong&gt;multiple unique keys&lt;/strong&gt; and have no real use for the unique keys except to check if the row exist.&lt;/p&gt;

&lt;p&gt;You can combine all the unique fields into one &lt;span class=&quot;impt&quot;&gt;single hash column&lt;/span&gt; where you can query like so.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;SELECT id FROM bands WHERE hash = &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$field_1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; , &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$field_2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; , &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$field_3&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; , &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$field_4&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This saves mysql from checking multiple columns for matches simply to fulfill a check exist query.&lt;/p&gt;
</description>
<pubDate>Wed, 01 Jan 2014 00:00:00 +0800</pubDate>
<link>/web/2014/01/01/optimizing-case-sensitive-unique-key-query-without-using-utf8_cs-collation.html</link>
<guid isPermaLink="true">/web/2014/01/01/optimizing-case-sensitive-unique-key-query-without-using-utf8_cs-collation.html</guid>
</item>

<item>
<title>How to install luarocks (Unix)</title>
<description>&lt;p&gt;LuaRocks, a deployment and management system for Lua modules. Like homebrew for mac users, luarocks has a repository that makes the installation of lua modules a breeze.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;wget http://luarocks.org/releases/luarocks-2.1.2.tar.gz

tar -zxvf luarocks-2.1.2.tar.gz

&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;luarocks-2.1.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Depending on your setup, you may need to specify the lua location. The default is /usr&lt;/p&gt;

&lt;p&gt;For my setup, I have installed the lua at /usr/local/bin/lua&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;./configure --with-lua&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/bin

make

sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The full list of available configurations is &lt;a href=&quot;http://luarocks.org/en/Installation_instructions_for_Unix&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once install you can install your modules like so&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;luarocks install luafilesystem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Thu, 28 Nov 2013 00:00:00 +0800</pubDate>
<link>/web/2013/11/28/how-to-install-luarocks-on-ubuntu.html</link>
<guid isPermaLink="true">/web/2013/11/28/how-to-install-luarocks-on-ubuntu.html</guid>
</item>

<item>
<title>Package management command cheat sheet for Redhat Linux</title>
<description>&lt;p&gt;Here is my list of mostly frequently used &lt;strong&gt;yum&lt;/strong&gt; commmnds that will help you handle most if not all of the package management &lt;u&gt;you will ever need&lt;/u&gt;.&lt;/p&gt;

&lt;h2&gt;Updating repositories&lt;/h2&gt;

&lt;p&gt;If you are using &lt;strong&gt;Fedora&lt;/strong&gt;, then you usually have the latest repository without doing much.&lt;/p&gt;

&lt;p&gt;If you are using &lt;strong&gt;CentOS&lt;/strong&gt; or &lt;strong&gt;RHEL&lt;/strong&gt;, then you best bet is to get the repo from &lt;a href=&quot;https://webtatic.com/projects/yum-repository/&quot;&gt;webtatic&lt;/a&gt;.
The installation of the repo is simply &amp;quot;rpm -Uvh&amp;quot; followed by the repo url.&lt;/p&gt;

&lt;h3&gt;YUM&lt;/h3&gt;

&lt;p&gt;Searching for package&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# search package name &amp;amp; description by term&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum search tomcat

&lt;span class=&quot;c&quot;&gt;# search package name that start with term&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum list tomcat
tomcat7-common
tomcat7
tomcat7-admin
tomcat7-examples
tomcat7-docs
tomcat7-user

&lt;span class=&quot;c&quot;&gt;# list all installed packages in system &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum list installed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Upgrading packages&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# upgrade packages (safe)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum update

&lt;span class=&quot;c&quot;&gt;# upgrade packages and remove existing obsolete packages&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# which you may be using&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Installing packages&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# install specific package&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum install tomcat7

&lt;span class=&quot;c&quot;&gt;# remove wildcard package&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum install &lt;span class=&quot;s1&quot;&gt;&amp;#39;tomcat7*&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# install package group&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum groupinstall &lt;span class=&quot;s1&quot;&gt;&amp;#39;Development Tools&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Removing packages&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# install specific package&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum erase tomcat7

&lt;span class=&quot;c&quot;&gt;# remove wildcard package&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum erase &lt;span class=&quot;s1&quot;&gt;&amp;#39;tomcat7*&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Checking for broken packages/ dependencies&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# update package cache and check for broken dependencies&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum check

&lt;span class=&quot;c&quot;&gt;# check for packages to update&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum check-update

&lt;span class=&quot;c&quot;&gt;# reinstall package and dependencies&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum reinstall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cleaning up archive files&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# delete all cached data&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 20 Nov 2013 00:00:00 +0800</pubDate>
<link>/web/2013/11/20/package-management-command-cheat-sheet-for-redhat-linux.html</link>
<guid isPermaLink="true">/web/2013/11/20/package-management-command-cheat-sheet-for-redhat-linux.html</guid>
</item>

<item>
<title>Package management command cheat sheet for Debian Linux</title>
<description>&lt;p&gt;Here is my list of mostly frequently used &lt;strong&gt;apt-cache&lt;/strong&gt; and &lt;strong&gt;apt-get&lt;/strong&gt; commmands that will help you handle most if not all of the package management &lt;u&gt;you will ever need&lt;/u&gt;.&lt;/p&gt;

&lt;h3&gt;APT-CACHE&lt;/h3&gt;

&lt;p&gt;Searching for package&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# search package name &amp;amp; description by term&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-cache search tomcat7
libtomcat7-java - Servlet and JSP engine -- core libraries
tomcat7 - Servlet and JSP engine
tomcat7-admin - Servlet and JSP engine -- admin web applications
tomcat7-common - Servlet and JSP engine -- common files
tomcat7-docs - Servlet and JSP engine -- documentation
tomcat7-examples - Servlet and JSP engine -- example web applications
tomcat7-user - Servlet and JSP engine -- tools to create user instances

&lt;span class=&quot;c&quot;&gt;# search package name that start with term&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-cache pkgnames tomcat7
tomcat7-common
tomcat7
tomcat7-admin
tomcat7-examples
tomcat7-docs
tomcat7-user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;APT-GET&lt;/h3&gt;

&lt;p&gt;Updating package source list&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Upgrading packages&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# upgrade packages (safe)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get upgrade

&lt;span class=&quot;c&quot;&gt;# upgrade may add or remove existing packages&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get dist-upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Installing packages&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# install specific package&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install tomcat7

&lt;span class=&quot;c&quot;&gt;# remove wildcard package&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install &lt;span class=&quot;s1&quot;&gt;&amp;#39;tomcat7*&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Removing packages&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# install specific package&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get remove tomcat7

&lt;span class=&quot;c&quot;&gt;# remove wildcard package&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get remove &lt;span class=&quot;s1&quot;&gt;&amp;#39;tomcat7*&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# remove package &amp;amp; config files&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get purge tomcat7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Checking for broken packages/ dependencies&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# update package cache and check for broken dependencies&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get check

&lt;span class=&quot;c&quot;&gt;# install dependencies for package&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get build-dep
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cleaning up archive files&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# delete all stored archived .deb files&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get clean

&lt;span class=&quot;c&quot;&gt;# only delete .deb files that can no longer be downloaded&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get autoclean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 20 Nov 2013 00:00:00 +0800</pubDate>
<link>/web/2013/11/20/package-management-command-cheat-sheet-for-debian-linux.html</link>
<guid isPermaLink="true">/web/2013/11/20/package-management-command-cheat-sheet-for-debian-linux.html</guid>
</item>

<item>
<title>Difference between redis EVAL command and redis-cli --eval</title>
<description>&lt;p&gt;There are a number of tutorials that focus on the redis eval command (which is the interactive mode).&lt;/p&gt;

&lt;p&gt;Most of it demostrates with using the cli like so &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;redis-cli

EVAL &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(cat update_members.lua)&amp;quot;&lt;/span&gt; 2 members:counter members:email username@example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where the &lt;u&gt;update_members.lua&lt;/u&gt; is something like: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;lua&quot;&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KEYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;member_emails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KEYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;INCR&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;HSET&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member_emails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member_id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While this is not wrong, most of you might be confuse this with the --eval option available on redis-cli which is awfully similar. You might end up wondering why your KEYS[1] and ARG[1] are gumbled up and the error messages are not making any sense.&lt;/p&gt;

&lt;p&gt;If you type redis-cli --help, you get the &lt;strong&gt;typical bullshit documentation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It doesn&amp;#39;t offer any explanation why your arguments are not working, the way it should (or least the way you expected it to be like the EVAL command in interactive mode).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;redis-cli --help

Usage: redis-cli &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OPTIONS&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;cmd &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;arg &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;arg ...&lt;span class=&quot;o&quot;&gt;]]]&lt;/span&gt;
--eval &amp;lt;file&amp;gt;     Send an EVAL &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;using the Lua script at &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are using the command line format &amp;mdash; &lt;strong&gt;redis-cli --eval&lt;/strong&gt;, there is no ARGV variable in the file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You only have &lt;strong&gt;KEYS&lt;/strong&gt;, and can assess them like KEYS[1], KEYS[2], etc and &lt;span class=&quot;impt&quot;&gt;you don&amp;#39;t have to specify the number of arguments&lt;/span&gt; like you do in the EVAL command.&lt;/p&gt;

&lt;p&gt;And so you only need to do something like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;redis-cli -eval /path/to/script.lua key1 key2 key3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And there you go, you can do call your redis operations using redis.call() and go ahead to script in lua.&lt;/p&gt;

&lt;p&gt;Personally, I find that more use for the redis-cli --eval because I use to pipe variables from other input to redis-cli.&lt;/p&gt;
</description>
<pubDate>Thu, 14 Nov 2013 00:00:00 +0800</pubDate>
<link>/web/2013/11/14/difference-between-redis-eval-command-and-redis-cli-eval.html</link>
<guid isPermaLink="true">/web/2013/11/14/difference-between-redis-eval-command-and-redis-cli-eval.html</guid>
</item>

<item>
<title>What is your use for Redis?</title>
<description>&lt;p&gt;Personally, I use redis for storing/ caching simple stats like google analytics, caching mysql queries and counter stats for applications. &lt;/p&gt;

&lt;p&gt;I think the main use for redis is strictly to caching at abstract query level. If you are planning to store records, I think using solr will a more suitable option.&lt;/p&gt;

&lt;p&gt;Stackoverflow also primary uses redis for &lt;a href=&quot;http://meta.stackexchange.com/questions/69164/does-stack-overflow-use-caching-and-if-so-how/69172#69172&quot;&gt;caching&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Thu, 23 May 2013 00:00:00 +0800</pubDate>
<link>/web/2013/05/23/what-is-your-use-for-redis.html</link>
<guid isPermaLink="true">/web/2013/05/23/what-is-your-use-for-redis.html</guid>
</item>

<item>
<title>Managing processes in unix</title>
<description>&lt;h2&gt;About the PS command&lt;/h2&gt;

&lt;p&gt;The ps (i.e., process status) command is used to provide information about the currently running processes, including their process identification numbers (PIDs). A process, also referred to as a task, is an executing (i.e., running) instance of a program. Every process is assigned a unique PID by the system.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;ps aux &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;AUX headers&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;USER&lt;/li&gt;
&lt;li&gt;PID&lt;br&gt;&lt;/li&gt;
&lt;li&gt;%CPU &lt;/li&gt;
&lt;li&gt;%MEM&lt;/li&gt;
&lt;li&gt;VSZ&lt;/li&gt;
&lt;li&gt;RSS&lt;/li&gt;
&lt;li&gt;TT&lt;/li&gt;
&lt;li&gt;STAT&lt;/li&gt;
&lt;li&gt;STARTED&lt;/li&gt;
&lt;li&gt;TIME&lt;/li&gt;
&lt;li&gt;COMMAND&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Most of the time, you only need to care about &lt;strong&gt;USER&lt;/strong&gt;, &lt;strong&gt;PID&lt;/strong&gt; and &lt;strong&gt;COMMAND&lt;/strong&gt;. If you have &lt;/p&gt;
</description>
<pubDate>Mon, 17 Dec 2012 00:00:00 +0800</pubDate>
<link>/web/2012/12/17/kill-process-master.html</link>
<guid isPermaLink="true">/web/2012/12/17/kill-process-master.html</guid>
</item>

</channel>
</rss>